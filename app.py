import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import matplotlib.pyplot as plt
import joblib
from tensorflow.keras.models import load_model
import numpy as np
from datetime import timedelta
import ipeadatapy as ip

# Fun√ß√£o para carregar os dados da API
@st.cache_data
def carregar_dados():
    df = ip.timeseries('EIA366_PBRENT366', yearGreaterThan=1999)
    df = df.rename(columns={'VALUE (US$)': 'Preco'})
    df.index = pd.to_datetime(df.index)
    df = df.sort_index().dropna()
    df = df[['Preco']]
    return df

# Fun√ß√£o para exibir a s√©rie hist√≥rica

def mostrar_serie_historica(df):
    st.subheader("\U0001F4C8 S√©rie Hist√≥rica do Pre√ßo do Petr√≥leo (USD)")
    fig, ax = plt.subplots(figsize=(14, 4))
    ax.plot(df['Preco'], label='Pre√ßo Real', linewidth=1.5, color='#1f77b4')
    ax.set_xlabel("Data")
    ax.set_ylabel("Pre√ßo (USD)")
    ax.legend()
    ax.grid(True, linestyle='--', alpha=0.3)
    st.pyplot(fig)

# Gr√°fico com eventos
def mostrar_insights_com_grafico(df):
    st.subheader("\U0001F4CA Impacto de Eventos no Pre√ßo do Petr√≥leo")
    st.write('Considerando os √∫ltimos 6 anos de dados, notamos aqui alguns eventos impactantes e uma certa estabiliza√ß√£o na vari√¢ncia do valor:')
    df = df[df.index >= df.index.max() - pd.DateOffset(years=6)]
    fig, ax = plt.subplots(figsize=(14, 4))
    ax.plot(df.index, df['Preco'], label='Pre√ßo Brent', linewidth=1.5, color='#1f77b4')

    eventos = {
        "Invas√£o da Ucr√¢nia": "2022-02-24",
        "Corte OPEP+": "2020-04-12",
        "In√≠cio da Pandemia": "2020-03-11",
        "COP26": "2021-11-01"
    }

    y_max = df['Preco'].max()
    y_min = df['Preco'].min()
    altura_anotacao = y_min + (y_max - y_min) * 0.6

    for i, (evento, data) in enumerate(eventos.items()):
        data = pd.to_datetime(data)
        if data >= df.index.min():
            ax.axvline(data, color='red', linestyle='--', alpha=0.7)
            deslocamento_dias = 20 * ((i % 2) + 1)
            ax.annotate(evento,
                        xy=(data, y_max * 0.7),
                        xytext=(data + pd.Timedelta(days=deslocamento_dias), altura_anotacao - i * 10),
                        textcoords='data',
                        ha='left',
                        va='bottom',
                        fontsize=9,
                        color='darkred',
                        bbox=dict(boxstyle='round,pad=0.2', fc='white', ec='red', alpha=0.8),
                        arrowprops=dict(arrowstyle='->', color='red', lw=0.8))
    ax.set_title("Pre√ßo do Petr√≥leo Brent com Eventos Relevantes (6 anos)")
    ax.set_xlabel("Ano")
    ax.set_ylabel("USD/barril")
    ax.legend()
    ax.grid(True, linestyle='--', alpha=0.3)
    st.pyplot(fig)

# Gr√°ficos de m√©dias m√≥veis
def mostrar_medias_moveis(df):
    df_plot = df.copy()
    df_plot['MM_30'] = df_plot['Preco'].rolling(window=30).mean()
    df_plot['MM_90'] = df_plot['Preco'].rolling(window=90).mean()

    st.subheader("üìä M√©dias M√≥veis (Tend√™ncia)")
    fig, ax = plt.subplots(figsize=(14, 4))
    ax.plot(df_plot.index, df_plot['Preco'], label='Pre√ßo Real', alpha=0.5, color='#1f77b4')
    ax.plot(df_plot.index, df_plot['MM_30'], label='M√©dia M√≥vel 30 dias', color='orange')
    ax.plot(df_plot.index, df_plot['MM_90'], label='M√©dia M√≥vel 90 dias', color='green')
    ax.set_title("Tend√™ncia do Pre√ßo com M√©dias M√≥veis")
    ax.set_xlabel("Ano")
    ax.set_ylabel("USD/barril")
    ax.legend()
    ax.grid(True, linestyle='--', alpha=0.3)
    st.pyplot(fig)

    st.subheader("üìä M√©dias M√≥veis (√öltimos 5 anos)")
    fig, ax = plt.subplots(figsize=(14, 4))
    df_plot = df_plot[df_plot.index >= df_plot.index.max() - pd.DateOffset(years=5)]
    ax.plot(df_plot.index, df_plot['Preco'], label='Pre√ßo Real', alpha=0.5, color='#1f77b4')
    ax.plot(df_plot.index, df_plot['MM_30'], label='M√©dia M√≥vel 30 dias', color='orange')
    ax.plot(df_plot.index, df_plot['MM_90'], label='M√©dia M√≥vel 90 dias', color='green')
    ax.set_title("Tend√™ncia Recente com M√©dias M√≥veis")
    ax.set_xlabel("Ano")
    ax.set_ylabel("USD/barril")
    ax.legend()
    ax.grid(True, linestyle='--', alpha=0.3)
    st.pyplot(fig)
    st.markdown("""
    üìå **Insight adicional:**
    No gr√°fico das m√©dias m√≥veis, √© poss√≠vel observar que ap√≥s a invas√£o da Ucr√¢nia, o petr√≥leo se manteve em um patamar elevado, mas com alta volatilidade. 
    As curvas de 30 e 90 dias demonstram tend√™ncia de converg√™ncia apenas a partir de meados de 2023, indicando estabilidade relativa ap√≥s choques externos.
    """)

# Fun√ß√£o para exibir varia√ß√£o percentual mensal
def mostrar_variacao_percentual(df):
    df_mensal = df.resample('M').mean()
    df_mensal['Varia√ß√£o %'] = df_mensal['Preco'].pct_change() * 100

    st.subheader("üìâ Varia√ß√£o Percentual Mensal")
    fig, ax = plt.subplots(figsize=(14, 4))
    ax.bar(df_mensal.index, df_mensal['Varia√ß√£o %'], color='#ff7f0e', width=20)
    ax.set_title("Varia√ß√£o Mensal do Pre√ßo do Petr√≥leo")
    ax.set_xlabel("M√™s")
    ax.set_ylabel("% de Varia√ß√£o")
    ax.axhline(0, color='gray', linestyle='--', linewidth=0.8)
    ax.grid(True, linestyle='--', alpha=0.3)
    st.pyplot(fig)

# Fun√ß√£o para exibir varia√ß√£o percentual mensal (√∫ltimos 5 anos)
    st.subheader("üìâ Varia√ß√£o Percentual Mensal (√öltimos 5 anos)")
    fig, ax = plt.subplots(figsize=(14, 4))
    df_mensal = df_mensal[df_mensal.index >= df_mensal.index.max() - pd.DateOffset(years=5)]
    ax.bar(df_mensal.index, df_mensal['Varia√ß√£o %'], color='#ff7f0e', width=20)
    ax.set_title("Varia√ß√£o Mensal do Pre√ßo do Petr√≥leo (Recente)")
    ax.set_xlabel("M√™s")
    ax.set_ylabel("% de Varia√ß√£o")
    ax.axhline(0, color='gray', linestyle='--', linewidth=0.8)
    ax.grid(True, linestyle='--', alpha=0.3)
    st.pyplot(fig)

    # Insight adicional
    st.markdown("""
    üìå **Insight complementar sobre volatilidade:**
    A varia√ß√£o percentual mensal evidencia per√≠odos de forte oscila√ß√£o, especialmente em 2020 e 2022. 
    Isso reflete o impacto direto de eventos como a pandemia e a guerra na Ucr√¢nia.
    Em contrapartida, entre 2023 e 2024, observa-se uma tend√™ncia de normaliza√ß√£o com flutua√ß√µes mensais menos extremas, 
    indicando uma poss√≠vel acomoda√ß√£o do mercado internacional diante de choques anteriores.
    """)

# Fun√ß√£o pra exportar previs√£o para csv
def gerar_csv_previsao(datas, previsoes):
    df = pd.DataFrame({
        'Data': datas.strftime('%d/%m/%Y'),
        'Pre√ßo Previsto (USD)': previsoes
    })
    return df.to_csv(index=False).encode('utf-8')

# Fun√ß√£o para prever usando o modelo XGBoost
def prever_xgboost(modelo, df):
    scaler = joblib.load("scaler_xgb.pkl")
    dados = df['Preco'].values.reshape(-1, 1)
    dados_norm = scaler.transform(dados)
    ultimos = dados_norm[-11:].flatten()
    previsoes = []
    for _ in range(15):
        pred = modelo.predict([ultimos])[0]
        previsoes.append(pred)
        ultimos = np.append(ultimos[1:], pred)
    previsoes = scaler.inverse_transform(np.array(previsoes).reshape(-1, 1)).flatten()
    datas_previstas = pd.date_range(start=df.index[-1] + timedelta(days=1), periods=15)
    return datas_previstas, previsoes

# Fun√ß√£o para prever usando LSTM
def prever_lstm(modelo, df):
    scaler = joblib.load("scaler_lstm.pkl")
    dados = df['Preco'].values.reshape(-1, 1)
    dados_norm = scaler.transform(dados)
    ultimos = dados_norm[-30:].reshape(1, 30, 1)
    previsoes = []
    for _ in range(15):
        pred = modelo.predict(ultimos)[0][0]
        previsoes.append(pred)
        ultimos = np.append(ultimos[:, 1:, :], [[[pred]]], axis=1)
    previsoes = scaler.inverse_transform(np.array(previsoes).reshape(-1, 1)).flatten()
    datas_previstas = pd.date_range(start=df.index[-1] + timedelta(days=1), periods=15)
    return datas_previstas, previsoes

# Streamlit App
st.set_page_config(layout="wide")
st.title("\U0001F4CA Dashboard de Previs√£o do Pre√ßo do Petr√≥leo")
dados = carregar_dados()

with st.sidebar:
    aba_selecionada = option_menu(
        menu_title="Navega√ß√£o",
        options=["üìò Contexto e Insights", "üìä Hist√≥rico", "üîÆ Previs√£o"],
        icons=["Ball", "Ball", "Ball"],
        menu_icon=None,
        default_index=0,
        orientation="vertifcal"
    )
    st.markdown("""
    Grupo 8:
    - Marlon Jobim Fernandez (RM353490)
    - Roberto Cavedon Muller (RM353491)
    """)

# ABA 1: CONTEXTO
if aba_selecionada == "üìò Contexto e Insights":
    st.title("\U0001F4D8 Contexto do Projeto e Insights")
    st.markdown("""
    Este dashboard foi desenvolvido como parte do **POSTECH Tech Challenge ‚Äì Fase 4**, com o objetivo de fornecer **insights estrat√©gicos** sobre o pre√ßo do petr√≥leo Brent e permitir **previs√µes automatizadas** para apoio √† tomada de decis√£o.

    ### ‚ú® Objetivo
    - Visualizar a evolu√ß√£o hist√≥rica do pre√ßo do petr√≥leo
    - Observar comportamentos sazonais e anomalias
    - Realizar previs√µes com modelos de Machine Learning (XGBoost e LSTM)

    ### üîé Insights Relevantes com Impacto no Pre√ßo

    1. **üìå Crise Geopol√≠tica: Guerra na Ucr√¢nia (fev/2022)**  
       A invas√£o da Ucr√¢nia pela R√∫ssia desencadeou san√ß√µes, corte na oferta e especula√ß√µes. O petr√≥leo Brent ultrapassou **120 USD**.

    2. **üìâ Queda de Demanda: COVID-19 (mar/2020)**  
       A pandemia provocou colapso na demanda por energia. O pre√ßo caiu abaixo de **20 USD** devido √† retra√ß√£o global.

    3. **‚öñÔ∏è A√ß√£o Coordenada: Corte da OPEP+ (abr/2020)**  
       Para conter a queda de pre√ßos, a OPEP+ cortou a produ√ß√£o, promovendo estabiliza√ß√£o gradativa.

    4. **üå± Press√£o Verde: COP26 e ESG (nov/2021)**  
       Incentivos √† transi√ß√£o energ√©tica e press√£o por fontes limpas geraram volatilidade nas expectativas futuras.
    """)

    mostrar_insights_com_grafico(dados)

# ABA 2: HIST√ìRICO
elif aba_selecionada == "üìä Hist√≥rico":
    st.subheader("üìà Evolu√ß√£o Hist√≥rica do Pre√ßo do Petr√≥leo Brent")
    st.markdown("""
    Esta aba apresenta a s√©rie hist√≥rica do petr√≥leo Brent desde 2000 at√© o momento atual.
    Com isso, podemos observar o comportamento do mercado global de energia ao longo dos anos, 
    destacando tend√™ncias de curto e m√©dio prazo, bem como per√≠odos de alta volatilidade.
    """)

    mostrar_serie_historica(dados)

    st.markdown("---")
    mostrar_medias_moveis(dados)

    st.markdown("---")
    mostrar_variacao_percentual(dados)


# ABA 3: PREVISAO
elif aba_selecionada == "üîÆ Previs√£o":
    st.markdown("## üîÆ Previs√£o do Pre√ßo do Petr√≥leo Brent")
    st.markdown("""
    Aqui voc√™ pode gerar uma previs√£o para os pr√≥ximos dias com base nos modelos treinados.
    Utilize o seletor abaixo para escolher entre dois modelos de Machine Learning:
    - **XGBoost**: r√°pido, baseado em √°rvores de decis√£o.
    - **LSTM**: mais robusto, ideal para capturar padr√µes temporais.
    """)

    modelo_escolhido = st.selectbox("Selecione o modelo para previs√£o:", ["XGBoost", "LSTM"], index=0)

    if modelo_escolhido == "XGBoost":
        rmse_modelo = 1.74
    else:
        rmse_modelo = 2.12

    st.markdown(f"**üìâ RMSE do modelo selecionado:** {rmse_modelo:.2f}")

    dias_historico_prev = st.slider("Selecione o per√≠odo a ser exibido no gr√°fico hist√≥rico (dias)", min_value=30, max_value=365, value=365, step=30)

    if st.button("Gerar Previs√£o"):
        with st.spinner("Carregando modelo e gerando previs√£o..."):
            if modelo_escolhido == "XGBoost":
                modelo = joblib.load("modelo_xgboost.pkl")
                datas, previsoes = prever_xgboost(modelo, dados)
            else:
                modelo = load_model("modelo_lstm.keras")
                datas, previsoes = prever_lstm(modelo, dados)

            st.success("Previs√£o gerada com sucesso!")

            fig, ax = plt.subplots(figsize=(14, 4))
            dados_recorte = dados.iloc[-dias_historico_prev:]
            ax.plot(dados_recorte.index, dados_recorte['Preco'], label='Hist√≥rico')
            # Destacar subida/descida com cor
            for i in range(1, len(previsoes)):
                cor = 'green' if previsoes[i] > previsoes[i-1] else 'red'
                ax.plot(datas[i-1:i+1], previsoes[i-1:i+1], color=cor, linewidth=2, alpha=0.8, label='_nolegend_')
            ax.plot(datas, previsoes, label='Previs√£o (15 dias)', linestyle='--', color='black', linewidth=1)
            ax.set_xlabel("Data")
            ax.set_ylabel("Pre√ßo (USD)")
            ax.grid(True, linestyle='--', alpha=0.3)
            ax.legend()
            st.pyplot(fig)
            # Interpreta√ß√£o autom√°tica
            if previsoes[-1] > previsoes[0]:
                st.success("üìà Tend√™ncia de alta observada nas previs√µes.")
            else:
                st.warning("üìâ Tend√™ncia de queda observada nas previs√µes.")
            # Tabela
            tabela_previsao = pd.DataFrame({
                'Data': datas.strftime('%d/%m/%Y'),
                'Pre√ßo Previsto (USD)': previsoes
            })
            tabela_formatada = tabela_previsao.style.format({'Pre√ßo Previsto (USD)': '${:,.2f}'})
            st.markdown("### üìã Tabela com Previs√£o")
            st.dataframe(tabela_formatada, use_container_width=False, hide_index=True, height=565)

            # Bot√£o de download
            csv = gerar_csv_previsao(datas, previsoes)
            st.download_button("üì• Baixar previs√£o como CSV", data=csv, file_name='previsao_petroleo.csv', mime='text/csv')